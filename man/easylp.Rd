% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class.R
\name{easylp}
\alias{easylp}
\title{Easy Linear Problem}
\value{
The objective function. \code{$objective_fun}.

The objective function. \code{$objective_fun}.
}
\description{
Object containing all the information about a linear problem, as well
as functions to define, modify, and solve it.
}
\examples{

## ------------------------------------------------
## Method `easylp$var`
## ------------------------------------------------

lp <- easylp$new()
lp$var("x", Origin = letters[1:3], Destination = letters[1:3], lower = 0)
my_sets <- list(Origin = letters[1:3], Destination = letters[1:3])
lp$var("y", !!!my_sets, lower = 0)
lp$variables

## ------------------------------------------------
## Method `easylp$con`
## ------------------------------------------------

# Make sure to build vignettes when installing the package.
vignette("constraints")
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{variables}}{List of variables included.}

\item{\code{constraint}}{List including the constraint matrix 'mat',
a vector of directions 'dir', and a vector of right-hand-side values 'rhs'.
Printed as a single matrix.}

\item{\code{aliases}}{List of aliases. Named expressions.}

\item{\code{objective_fun}}{Vector of coefficients for the objective function.}

\item{\code{objective_add}}{Optional value to add to the objective value.
Automatically set when there's an added/subtracted constant in the objective function.}

\item{\code{pointer}}{Pointer to an lpSolveAPI object. Do not modify it, as
it is redefined every time the problem is solved.
See more at \url{https://lpsolve.sourceforge.net/5.5/}.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{solution}}{Optimal values for each variable, with
the sets they were defined with.}

\item{\code{sensitivity_objective}}{Sensitivity for objective function coefficients.
Rows are variables, first column is the lower bound,
second column is the current value,
and third column is the upper bound.}

\item{\code{sensitivity_rhs}}{Sensitivity for constraint right-hand-side coefficients.
Rows are variables, first column is the lower bound,
second column is the current value,
and third column is the upper bound.}

\item{\code{nvar}}{Actual number of variables, \code{sum(lengths(variables))}.}

\item{\code{ncon}}{Number of constraints. \code{nrow(constraint$mat)}}

\item{\code{direction}}{Character indicating whether to minimize 'min' or maximize
'max' the objective function. Automatically changed when defining
objective with \code{easylp$min(), easylp$max()}}

\item{\code{objective_value}}{Value of the objective function with the optimal solution AFTER
adding \code{objective_add} and applying the posterior transformation if any.
See \code{vignette("objective")}.}

\item{\code{objective_value_raw}}{Value of the objective function with the optimal solution BEFORE
adding \code{objective_add} and applying the posterior transformation if any.
See \code{vignette("objective")}.}

\item{\code{objective_transform}}{Function applied to the objective function.
See \code{vignette("objective")}.}

\item{\code{status}}{Character indicating the status of the problem. Initialized as
'unsolved'. Changes when solving the problem using \code{easylp$solve()}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-easylp-var}{\code{easylp$var()}}
\item \href{#method-easylp-con}{\code{easylp$con()}}
\item \href{#method-easylp-min}{\code{easylp$min()}}
\item \href{#method-easylp-max}{\code{easylp$max()}}
\item \href{#method-easylp-solve}{\code{easylp$solve()}}
\item \href{#method-easylp-uncon}{\code{easylp$uncon()}}
\item \href{#method-easylp-associate}{\code{easylp$associate()}}
\item \href{#method-easylp-alias}{\code{easylp$alias()}}
\item \href{#method-easylp-check_feasible}{\code{easylp$check_feasible()}}
\item \href{#method-easylp-check_solved}{\code{easylp$check_solved()}}
\item \href{#method-easylp-any_integer}{\code{easylp$any_integer()}}
\item \href{#method-easylp-reset_solution}{\code{easylp$reset_solution()}}
\item \href{#method-easylp-import_solution}{\code{easylp$import_solution()}}
\item \href{#method-easylp-test}{\code{easylp$test()}}
\item \href{#method-easylp-print}{\code{easylp$print()}}
\item \href{#method-easylp-finalize}{\code{easylp$finalize()}}
\item \href{#method-easylp-clone}{\code{easylp$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-var"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-var}{}}}
\subsection{Method \code{var()}}{
Define a variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$var(
  name,
  ...,
  integer = FALSE,
  binary = FALSE,
  lower = -Inf,
  upper = +Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character scalar, name of the variable. Will be used in the
constraints and objective function.}

\item{\code{...}}{Optional sets used to index the variable. Can be named.
Supports \code{!!!sets} for using a list of sets. See examples.}

\item{\code{integer}}{Logical. Is the variable an integer?}

\item{\code{binary}}{Logical. Is the variable binary/boolean/logical?}

\item{\code{lower}}{Numeric scalar. Lower bound for the variable.}

\item{\code{upper}}{Numeric scalar. Upper bound for the variable.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{lp <- easylp$new()
lp$var("x", Origin = letters[1:3], Destination = letters[1:3], lower = 0)
my_sets <- list(Origin = letters[1:3], Destination = letters[1:3])
lp$var("y", !!!my_sets, lower = 0)
lp$variables
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-con"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-con}{}}}
\subsection{Method \code{con()}}{
Define constraints.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$con(..., envir = caller_env())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Constraints. See \code{vignette("constraints")}. Can be named.
Supports \code{!!!} (unquote-splice).}

\item{\code{envir}}{Environment where to evaluate constraints.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# Make sure to build vignettes when installing the package.
vignette("constraints")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-min"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-min}{}}}
\subsection{Method \code{min()}}{
Define objective function for a minimization problem.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$min(objective, transform = identity)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{objective}}{Uses the same syntax as constraints.
Must be a single value, so use \code{sum()} when needed.}

\item{\code{transform}}{Posterior function to apply to the objective function.
Does not change the behaviour of the solver.
You must ensure it's a monotonically increasing function. Otherwise,
the solution might not be optimal. See \code{vignette("objective")}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-max"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-max}{}}}
\subsection{Method \code{max()}}{
Define objective function for a maximization problem.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$max(objective, transform = identity)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{objective}}{Uses the same syntax as constraints.
Must be a single value, so use \code{sum()} when needed.}

\item{\code{transform}}{Posterior function to apply to the objective function.
Does not change the behaviour of the solver.
You must ensure it's a monotonically increasing function. Otherwise,
the solution might not be optimal. See \code{vignette("objective")}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-solve"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-solve}{}}}
\subsection{Method \code{solve()}}{
Find an optimal solution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$solve(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed on to \code{lpSolveAPI::lp.control()}.
See \code{\link[lpSolveAPI]{lp.control.options}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-uncon"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-uncon}{}}}
\subsection{Method \code{uncon()}}{
Remove constraints.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$uncon(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character vector containing the (unindexed) name of
the constraints to remove.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-associate"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-associate}{}}}
\subsection{Method \code{associate()}}{
Associate a numeric variable with a binary variable.
It's recommended to set both lower and upper bound for the
numeric variable before associating it to a binary variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$associate(
  x,
  binary,
  max1 = x$bound[2L],
  max0 = x$bound[1L],
  min1 = x$bound[1L],
  min0 = x$bound[1L]
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Numeric variable.}

\item{\code{binary}}{Binary variable.}

\item{\code{max1}}{Upper bound for 'x' when 'binary == 1'}

\item{\code{max0}}{Upper bound for 'x' when 'binary == 0'}

\item{\code{min1}}{Lower bound for 'x' when 'binary == 1'}

\item{\code{min0}}{Lower bound for 'x' when 'binary == 0'}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
By default, 'x' is bounded between it's lower and upper bound when
'binary == 1', and it's bounded to it's lower value when
'binary == 0'. If 'x' is integer, you usually want to set 'min0' to
1, to ensure 'x != 0' when 'binary == 1'.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-alias"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-alias}{}}}
\subsection{Method \code{alias()}}{
Define aliases that can be used in constraints and more. Must be named.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$alias(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Aliases. Must be named.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-check_feasible"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-check_feasible}{}}}
\subsection{Method \code{check_feasible()}}{
Checks if the current solution is feasible and resets it otherwise.
This function should be used every time you manually change a
value in the constraint matrix or right-hand-side.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$check_feasible(tol = 2e-08)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tol}}{Tolerance used for inequalities.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-check_solved"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-check_solved}{}}}
\subsection{Method \code{check_solved()}}{
Returns an error if problem is unsolved. Used internally.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$check_solved()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-any_integer"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-any_integer}{}}}
\subsection{Method \code{any_integer()}}{
Does the problem contain any integer or binary variables?
Used internally.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$any_integer()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-reset_solution"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-reset_solution}{}}}
\subsection{Method \code{reset_solution()}}{
Remove all solution data, including the objective value.
The pointer to the lpSolveAPI model is kept. Used internally.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$reset_solution()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-import_solution"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-import_solution}{}}}
\subsection{Method \code{import_solution()}}{
Import the solution into an environment.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$import_solution(envir = caller_env(), silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{envir}}{Environemt to import the solution to.
Defaults to the caller environment.}

\item{\code{silent}}{Whether to suppress the message.
Equivalent to:
\code{envir$x <- lp$solution$x}
\code{envir$y <- lp$solution$y}
\code{...}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-test"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-test}{}}}
\subsection{Method \code{test()}}{
Check if an operation is valid, using the problem's variables.
Supports 'for' syntax used in constraints.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$test(..., envir = caller_env())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Expressions to evaluate. Supports !!injection.}

\item{\code{envir}}{Used for recursion, do not change.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-print"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-print}{}}}
\subsection{Method \code{print()}}{
Print relevant information about a linear problem:
status, objective value, and solution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-finalize}{}}}
\subsection{Method \code{finalize()}}{
Delete the problem.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-easylp-clone"></a>}}
\if{latex}{\out{\hypertarget{method-easylp-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{easylp$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
